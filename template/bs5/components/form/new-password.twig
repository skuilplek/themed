{# New Password Input Component
    - name: string - The name attribute for the input field (optional)
    - id: string - The id attribute for the input field (optional)
    - class: string - Additional CSS classes for the form group (optional)
    - value: string - Initial value for the password input (optional)
    - label: string - Label text for the input (optional)
    - placeholder: string - Placeholder text for the input (optional)
    - required: boolean - Whether the field is required (optional, default: false)
    - disabled: boolean - Whether the field is disabled (optional, default: false)
    - showHideIcon: string - Custom icon for the show/hide password button (optional, default: eye-slash icon)
    - showIcon: string - Custom icon for the show password state (optional, default: eye icon)
    - configIcon: string - Custom icon for the config button down state (optional, default: caret-down icon)
    - configUpIcon: string - Custom icon for the config button up state (optional, default: caret-up icon)

    {{ component('form/new-password', {
        'name': 'user_password',
        'id': 'userPassword',
        'label': 'New Password',
        'placeholder': 'Enter your new password',
        'required': true
    }) }}

#}

<div class="form-group {{ content.class }}">
	<label for="{{ content.id|default('pwdInput') }}">{{ content.label|default('New Password') }}</label>
	<div class="input-group">
		<input type="password" id="{{ content.id|default('pwdInput') }}" name="{{ content.name|default('password') }}" class="form-control" {% if content.value %} value="{{ content.value }}" {% endif %} {% if content.placeholder %} placeholder="{{ content.placeholder }}" {% endif %} {% if content.required %} required {% endif %} {% if content.disabled %} disabled {% endif %} autocomplete="new-password">
		<button id="showHideBtn" class="btn btn-outline-secondary" type="button" title="Show/Hide Password">
			{% if content.showHideIcon is defined %}
				{{ content.showHideIcon|raw }}
			{% else %}
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewbox="0 0 16 16">
					<path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7 7 0 0 0-2.79.588l.77.771A6 6 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755q-.247.248-.517.486z"/>
					<path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829"/>
					<path d="M3.35 5.47q-.27.24-.518.487A13 13 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7 7 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12z"/>
				</svg>
			{% endif %}
		</button>
		<button id="createPwdBtn" class="btn btn-outline-secondary" type="button" title="Generate Password">
			<span class="d-none d-sm-inline">Generate</span>
		</button>
		<button id="configBtn" class="btn btn-outline-secondary" type="button" title="Password Settings">
			{% if content.configIcon is defined %}
				{{ content.configIcon|raw }}
			{% else %}
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down" viewbox="0 0 16 16">
					<path d="M3.204 5h9.592L8 10.481zm-.753.659 4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659"/>
				</svg>
			{% endif %}
		</button>
	</div>
	<ul id="pwdStrengthBar" class="pwdStrengthBar">
		<li></li>
		<li></li>
		<li></li>
		<li></li>
		<li></li>
	</ul>
	<div id="configPanel" class="panel panel-default configPanel">
		<div class="panel-body">
			<p>Select password generation options:</p>
			<div class="row">
				<div class="col-md-3">
					<label for="pwdLength">Length</label>
					<input id="pwdLength" type="number" class="form-control" min="10" max="32" value="18">
				</div>
			</div>
			<div class="row mt-3">
				<div class="col-md-6">
					<h5>Letters</h5>
					<div class="form-check">
						<input type="radio" name="letterType" id="lettersMixed" value="both" class="form-check-input" checked>
						<label for="lettersMixed" class="form-check-label">Both (aBcD)</label>
					</div>
					<div class="form-check">
						<input type="radio" name="letterType" id="lettersLower" value="lower" class="form-check-input">
						<label for="lettersLower" class="form-check-label">Lowercase (abcd)</label>
					</div>
					<div class="form-check">
						<input type="radio" name="letterType" id="lettersUpper" value="upper" class="form-check-input">
						<label for="lettersUpper" class="form-check-label">Uppercase (ABCD)</label>
					</div>
				</div>
				<div class="col-md-6">
					<h5>Numbers and Symbols</h5>
					<div class="form-check">
						<input type="radio" name="extraType" id="extrasMixed" value="both" class="form-check-input" checked>
						<label for="extrasMixed" class="form-check-label">Both (1@3$)</label>
					</div>
					<div class="form-check">
						<input type="radio" name="extraType" id="extrasNumbers" value="numbers" class="form-check-input">
						<label for="extrasNumbers" class="form-check-label">Numbers (123)</label>
					</div>
					<div class="form-check">
						<input type="radio" name="extraType" id="extrasSymbols" value="symbols" class="form-check-input">
						<label for="extrasSymbols" class="form-check-label">Symbols (@#$)</label>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div id="errorList" class="errorList"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/zxcvbn@4.4.2/dist/zxcvbn.js"></script>
<script>
	const pwdInput = document.getElementById('{{ content.id|default('pwdInput') }}');
    const showHideBtn = document.getElementById('showHideBtn');
    const createPwdBtn = document.getElementById('createPwdBtn');
    const configBtn = document.getElementById('configBtn');
    const configPanel = document.getElementById('configPanel');
    const pwdStrengthBar = document.getElementById('pwdStrengthBar').children;
    const errorList = document.getElementById('errorList');
    const pwdLength = document.getElementById('pwdLength');
    const letterTypeRadios = document.getElementsByName('letterType');
    const extraTypeRadios = document.getElementsByName('extraType');

    let showPassword = false;

    // Custom password generator
    function generatePassword(options) {
        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numbers = '0123456789';
        const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
        let chars = '';
        let password = '';

        // Build character set based on options
        if (options.lowercase) chars += lowercase;
        if (options.uppercase) chars += uppercase;
        if (options.numbers) chars += numbers;
        if (options.symbols) chars += symbols;

        // Ensure at least one character from each selected type
        if (options.lowercase) password += lowercase[Math.floor(Math.random() * lowercase.length)];
        if (options.uppercase) password += uppercase[Math.floor(Math.random() * uppercase.length)];
        if (options.numbers) password += numbers[Math.floor(Math.random() * numbers.length)];
        if (options.symbols) password += symbols[Math.floor(Math.random() * symbols.length)];

        // Fill the rest of the password length
        password += uppercase[Math.floor(Math.random() * uppercase.length)];

        if (options.numbers) password += numbers[Math.floor(Math.random() * numbers.length)];
        if (options.symbols) password += symbols[Math.floor(Math.random() * symbols.length)];

        // Fill the rest of the password length
        for (let i = password.length; i < options.length; i++) {
            password += chars[Math.floor(Math.random() * chars.length)];
        }

        // Shuffle the password
        password = password.split('').sort(() => Math.random() - 0.5).join('');

        return password;
    }

    function updateStrengthBar(score) {
        for (let i = 0; i < pwdStrengthBar.length; i++) {
            pwdStrengthBar[i].className = score >= i ? `level-${score}` : '';
        }
    }

    function validatePassword() {
        const password = pwdInput.value;
        const result = zxcvbn(password);
        const minLength = 5;
        const minStrength = 2;
        let errors = [];

        if (password.length<minLength) {
            errors.push('Enter a password that contains at least 5 characters.');
        }
        if (result.score < minStrength) {
            errors.push('Enter a <strong>stronger</strong> password.');
        }
        errorList.innerHTML = errors.map(err => `<li class="errorMsg">${err}</li>`).join('');
        updateStrengthBar(result.score);
    }

    function getGeneratorOptions() {
        const length = parseInt(pwdLength.value);
        const letterType = Array.from(letterTypeRadios).find(r => r.checked) .value;
        const extraType = Array.from(extraTypeRadios).find(r => r.checked).value;

        return {
            length,
            lowercase: letterType === 'both' || letterType === 'lower',
            uppercase: letterType === 'both' || letterType === 'upper',
            numbers: extraType === 'both' || extraType === 'numbers',
            symbols: extraType === 'both' || extraType === 'symbols'
        };
    }

    showHideBtn.addEventListener('click', () => {
        showPassword = ! showPassword;
        pwdInput.type = showPassword ? 'text' : 'password';
        showHideBtn.innerHTML = showPassword ? `{% if content.showIcon is defined %}{{ content.showIcon|raw }}{% else %}<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
          <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z"/>
          <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0"/>
        </svg>{% endif %}` : `{% if content.showHideIcon is defined %}{{ content.showHideIcon|raw }}{% else %}<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewBox="0 0 16 16">
          <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7 7 0 0 0-2.79.588l.77.771A6 6 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755q-.247.248-.517.486z"/>
          <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829"/>
          <path d="M3.35 5.47q-.27.24-.518.487A13 13 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7 7 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12z"/>
        </svg>{% endif %}`;
    });

    createPwdBtn.addEventListener('click', () => {
        const options = getGeneratorOptions();
        const newPassword = generatePassword(options);
        pwdInput.value = newPassword;
        validatePassword();
    });

    configBtn.addEventListener('click', () => {
        configPanel.classList.toggle('active');
        configBtn.innerHTML = configPanel.classList.contains('active') ? `{% if content.configUpIcon is defined %}{{ content.configUpIcon|raw }}{% else %}<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-up" viewBox="0 0 16 16">
          <path d="M3.204 11h9.592L8 5.519zm-.753-.659 4.796-5.48a1 1 0 0 1 1.506 0l4.796 5.48c.566.647.106 1.659-.753 1.659H3.204a1 1 0 0 1-.753-1.659"/>
        </svg>{% endif %}` : `{% if content.configIcon is defined %}{{ content.configIcon|raw }}{% else %}<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down" viewBox="0 0 16 16">
          <path d="M3.204 5h9.592L8 10.481zm-.753.659 4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659"/>
        </svg>{% endif %}`;
    });

    pwdInput.addEventListener('input', validatePassword);

    // Initial validation
    validatePassword();
</script>

